#!/usr/bin/env python

# --- BEGIN COPYRIGHT BLOCK ---
# Copyright (C) 2020
#
# Authors:
#   Simon Pichugin <simon.pichugin@gmail.com>
#   Dinesh Prasanth M K <dmoluguw@redhat.com>
#
# All rights reserved.
#
# License: GPL (version 3 or any later version).
# See LICENSE for details.
# --- END COPYRIGHT BLOCK ---
#

import logging
import argparse
import argcomplete
import sys
import signal
import pagure2github

parser = argparse.ArgumentParser()
parser.add_argument(
    "-v",
    "--verbose",
    help="Display verbose operation tracing during command execution",
    action="store_true",
    default=False,
)
parser.add_argument(
    "-i",
    "--issues-file",
    help="File path to store issues info (needed for Stage 2 and Stage 3)",
)
parser.add_argument(
    "-g",
    "--github-repo",
    type=str,
    help="GitHub repo in a format user/repo-name (dogtagpki/pki)",
)
parser.add_argument(
    "-p",
    "--pagure-repo",
    type=str,
    nargs="?",
    help="Pagure repo in a format user/repo-name (dogtagpki/pki)",
)

# Add command to create GH issues based on Pagure issues
subcommands = parser.add_subparsers(help="action")
create_gh_parser = subcommands.add_parser(
    "create-gh-issues", help="Create GitHub issues using Pagure info"
)
create_gh_parser.set_defaults(func=pagure2github.copy_issues)

# Add command to close Pagure with relevant comment, adding link to our new GH issue
update_pagure_parser = subcommands.add_parser(
    "update-pagure", help="Update Pagure issues"
)
update_pagure_parser.set_defaults(func=pagure2github.update_pagure_issues)

# Update BZ to point to the new GH issue created
update_bz_parser = subcommands.add_parser("update-bugzillas", help="Update Bugzillas")
update_bz_parser.set_defaults(func=pagure2github.update_bugzillas)

update_close_unused_milestones_parser = subcommands.add_parser(
    "close-unused-milestones", help="Close Unused Milestones"
)
update_close_unused_milestones_parser.set_defaults(func=pagure2github.close_unused_milestones)

check_gh_pg_statuses_parser = subcommands.add_parser("check-issue-statuses", help="Check that all issues have the right statuses")
check_gh_pg_statuses_parser.set_defaults(func=pagure2github.check_gh_pg_statuses)

fix_pg_reference_on_gh_parser = subcommands.add_parser("fix-references-comments", help="Replace issue/PR links with #0000 references")
fix_pg_reference_on_gh_parser.set_defaults(func=pagure2github.fix_pg_reference_on_gh)

fix_documentation_parser = subcommands.add_parser("fix-documentation-files", help="Replace Pagure links with GitHub links in a tree")
fix_documentation_parser.set_defaults(func=pagure2github.fix_documentation)

argcomplete.autocomplete(parser)


# handle a control-c gracefully
def signal_handler(signal, frame):
    print("\n\nExiting...")
    sys.exit(0)


if __name__ == "__main__":
    root = logging.getLogger()
    log = logging.getLogger("pagure2github")
    log_handler = logging.StreamHandler(sys.stdout)

    args = parser.parse_args()
    if args.verbose:
        log.setLevel(logging.DEBUG)
        log_format = "%(levelname)s: %(message)s"
    else:
        log.setLevel(logging.INFO)
        log_format = "%(message)s"
    log_handler.setFormatter(logging.Formatter(log_format))
    root.addHandler(log_handler)

    log.debug("Pagure Issues to Github Issues Migration Tool")
    log.debug("Called with: %s" % args)

    if not args.verbose:
        signal.signal(signal.SIGINT, signal_handler)

    if args.func:
        args.func(args, log)
